/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id "com.github.spotbugs"
    id "com.github.johnrengelman.shadow"
    id "de.undercouch.download"
    id "net.researchgate.release"
}

ext.ballerinaLangVersion = project.ballerinaLangVersion

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {

    configurations {
        externalJars
        ballerinaStdLibs
        jbalTools
    }

    dependencies {
        jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
            transitive = false
        }
        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${project.stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${project.stdlibMimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${project.stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${project.stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${project.stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${project.stdlibUuidVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${project.stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${project.stdlibJwtVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${project.stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${project.observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${project.observeInternalVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${project.stdlibCacheVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${project.stdlibFileVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${project.stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${project.stdlibTaskVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${project.stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${project.stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${project.stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.lib:data.jsondata-ballerina:${stdlibDataJsonDataVersion}"

        externalJars (group: 'org.apache.wss4j', name: 'wss4j-ws-security-dom', version: "${wsSecurityDomVersion}") {
            transitive = false
        }
        externalJars (group: 'org.apache.wss4j', name: 'wss4j-ws-security-common', version: "${wsSecurityDomVersion}") {
            transitive = false
        }
        externalJars (group: 'org.apache.santuario', name: 'xmlsec', version: "${xmlSecVersion}") {
            transitive = false
        }
    }
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")

release {
    failOnPublishNeeded = false

    buildTasks = ["build"]
    failOnSnapshotDependencies = true
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v$version'

    git {
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task build {
    dependsOn('soap-native:build')
    dependsOn('soap-ballerina:build')
}
